{"version":3,"sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","redux/contact/contacts-selector.js","components/ContactList/ContactList.styled.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactsFilter/ContactsFilter.styled.js","components/ContactsFilter/ContactsFilter.jsx","pages/ContactPage/ContactsPage.jsx"],"names":["Form","styled","form","Label","label","Input","input","Button","button","ContactForm","useState","name","setName","phone","setPhone","contacts","useFetchContactsQuery","data","useCreateContactMutation","createContact","isLoading","handleChange","event","target","value","resetForm","onSubmit","preventDefault","normalizedContact","toLowerCase","find","contact","toast","error","success","type","placeholder","onChange","pattern","title","required","disabled","getFilter","state","filter","List","ul","Item","li","Name","span","Number","a","ContactItem","id","useDeleteContactMutation","deleteContact","isDeleting","href","onClick","Loader","height","width","ContactList","isFetching","useSelector","shallowEqual","useEffect","includes","map","ContactsFilter","dispatch","useDispatch","changeFilter","currentTarget","ContactsPage","length"],"mappings":"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","file":"static/js/contacts-page.101b7ae7.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\nwidth: 100%;\nmargin-right: auto;\nmargin-left: auto;\nmargin-bottom: 15px;\npadding: 15px;\nborder: 1px solid #d4d4d4;\n`;\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\n\nmargin-bottom: 15px;\n\ncolor: #333232;\n`;\nexport const Input = styled.input`\npadding: 11px;\nborder: 1px solid rgba(33, 33, 33, 0.2);\nborder-radius: 4px;\n\ncursor: pointer;\n\n&:focus {\n    outline: transparent;\n    border: 1px solid #2196f3;\n}\n`;\nexport const Button = styled.button`\nmin-width: 150px;\n  height: 40px;\n  border: 0px solid transparent;\n  border-radius: 4px;\n\n  color: #fff;\n  background-color: #2196f3;\n\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n\n  opacity: 1;\n\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    opacity: 0.8;\n\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`;","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { Form, Label, Input, Button } from './ContactForm.styled'; //Стили\nimport {\n  useFetchContactsQuery,\n  useCreateContactMutation,\n} from 'redux/contact/contacts-sliceApi';\n\nconst ContactForm = () => {\n  // Локальный стейт контакта\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const { data: contacts } = useFetchContactsQuery();\n\n  const [createContact, { isLoading }] = useCreateContactMutation();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  // Метод на отправке формы. Формирует из локального стейта контакт и передает на бэкенд.\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Проверка на дубликат\n    const normalizedContact = name.toLowerCase();\n    const duplicateName = contacts.find(\n      contact => contact.name.toLowerCase() === normalizedContact,\n    );\n\n    if (duplicateName) {\n      toast.error(`${name} is already in contact list`);\n      resetForm();\n      return;\n    }\n\n    createContact(name, phone);\n    toast.success(`${name} is added to the contact list!`);\n    resetForm();\n  };\n\n  // Сброс полей формы (после отправки)\n  const resetForm = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Contact name\"\n          aria-label=\"Input for your name\"\n          value={name} // Пишем значение в стейт\n          onChange={handleChange} // Наблюдающий метод\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"phone\"\n          placeholder=\"Phone number\"\n          aria-label=\"Input for your phone number\"\n          value={phone} // Пишем значение в стейт\n          onChange={handleChange} // Наблюдающий метод\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          required\n        />\n      </Label>\n\n      <Button type=\"submit\" disabled={isLoading}>\n        Add contact\n      </Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","// селектор получения части стейта хранящего значение фильтра\nexport const getFilter = state => state.filter;\n","import styled from '@emotion/styled';\n\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\n\nmargin-left: -15px;\nmargin-top: -15px;\n\n`;","import styled from '@emotion/styled';\n\n \nexport const Item = styled.li `\ndisplay: flex;\njustify-content: space-around;\n\nflex-basis: calc(100% / 1 - 15px);\npadding: 15px 5px;\nborder: 1px solid #d4d4d4;\n\ntext-align: center;\n\nmargin-left: 15px;\nmargin-top: 15px\n\n\n`; \n export const Name = styled.span `\n color: #333232;\n  font-weight: 500;\n `; \n\n\nexport const Number = styled.a`\nmargin-right: 15px;\n\ncolor: #000000;\n\nfont-weight: 700;\ntext-decoration: none;\n\ntransition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n&:hover,\n  &:focus {\n    color: #2196f3;\n    transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`; \n\nexport const Button = styled.button`min-width: 50px;\nheight: 30px;\nborder: 0px solid transparent;\nborder-radius: 4px;\n\ncolor: #fff;\nbackground-color: #86888a;\n\nbox-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n\nopacity: 1;\n\ntransition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\ncursor: pointer;\n\n\n&:hover,\n&:focus {\n\n    opacity: 0.8;\n    background-color: #2196f3;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`\n;","import PropTypes from 'prop-types';\nimport { Item, Name, Number, Button } from './ContactItem.styled';\nimport { useDeleteContactMutation } from 'redux/contact/contacts-sliceApi';\nimport Loader from '../Loader/Loader';\n\n// Принимает один контакт и метод для удаления контакта\n\nconst ContactItem = ({ contact }) => {\n  const { name, phone, id } = contact;\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  return (\n    <Item>\n      <Name>{name}: </Name>\n      <Number href={`tel:${phone}`}>{phone}</Number>\n      <Button\n        type=\"button\"\n        // Метод на клике, принимает ID контакта\n        onClick={() => deleteContact(id)}\n        disabled={isDeleting}\n      >\n        {isDeleting && <Loader height={20} width={20} />}\n        Delete\n      </Button>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  phone: PropTypes.string,\n};\n\nexport default ContactItem;\n","import { useSelector, shallowEqual } from 'react-redux'; // Импортируем хуки для использования стейта и доставки экшинов прямо в компоненте\nimport { getFilter } from 'redux/contact/contacts-selector'; // Импортируем части стейта из selector\nimport { useEffect } from 'react';\nimport { List } from './ContactList.styled'; //Стили\nimport ContactItem from '../ContactItem/ContactItem'; //Компонент одного контакта\nimport { useFetchContactsQuery } from 'redux/contact/contacts-sliceApi';\nimport Loader from '../Loader/Loader';\nimport { toast } from 'react-toastify';\n// Принимает все отфильтрованные контакты и пробрасывает дальше метод для удаления контакта\n\nconst ContactList = () => {\n  const { data: contacts, isFetching, error } = useFetchContactsQuery();\n  const filter = useSelector(getFilter, shallowEqual);\n\n  useEffect(() => {\n    if (error) toast.error(` Error loading contact `);\n  }, [error]);\n\n  const filteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  return (\n    <List>\n      {contacts &&\n        filteredContacts().map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n      {isFetching && <Loader height={100} width={100} />}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  width: 300px;\n  padding-bottom: 30px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  margin-bottom: 15px;\n\n  color: #333232;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 11px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n\n  &:focus {\n    outline: transparent;\n    border: 1px solid #2196f3;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux'; // Импортируем хуки для использования стейта и доставки экшинов прямо в компоненте\nimport { changeFilter } from 'redux/contact/contacts-actions'; // Импортируем экшны для диспатча\nimport { getFilter } from 'redux/contact/contacts-selector'; // Импортируем части стейта из selector\nimport { Form, Label, Input } from './ContactsFilter.styled';\nimport PropTypes from 'prop-types'; //Стили\n\n// Принимает значение с поля фильтра и метод пишущий в стейт\n\nconst ContactsFilter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Form>\n        <Label>\n          <h3>Find contacts by name:</h3>\n          <Input\n            type=\"text\"\n            value={filter}\n            onChange={event =>\n              dispatch(changeFilter(event.currentTarget.value))\n            }\n          />\n        </Label>\n      </Form>\n    </>\n  );\n};\nContactsFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\nexport default ContactsFilter;\n","import ContactForm from 'components/ContactForm/ContactForm';\r\nimport ContactList from 'components/ContactList/ContactList';\r\nimport ContactsFilter from 'components/ContactsFilter/ContactsFilter';\r\nimport { useFetchContactsQuery } from '../../redux/contact/contacts-sliceApi';\r\nimport Loader from 'components/Loader/Loader';\r\n\r\n// import { useEffect } from 'react';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n\r\n// import Alert from '@material-ui/lab/Alert';\r\n\r\n// import ContactForm from '../../components/ContactForm';\r\n// import Filter from '../../components/Filter';\r\n// import ContactsList from '../../components/ContactsList';\r\n// import Loader from '../../components/Loader';\r\n\r\n// import { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\n// Компонент страницы контактов\r\nexport default function ContactsPage() {\r\n  const { data, isFetching } = useFetchContactsQuery();\r\n  //   const dispatch = useDispatch();\r\n\r\n  //   const isLoadingContacts = useSelector(state =>\r\n  //     contactsSelectors.getLoading(state),\r\n  //   ); // Селектор статуса загрузки из контактов\r\n  //   const isError = useSelector(state => contactsSelectors.getError(state)); // Селектор статуса ошибки из контактов\r\n\r\n  //   // Фетч за контактами при маунте\r\n  //   useEffect(() => {\r\n  //     dispatch(contactsOperations.fetchContacts());\r\n  //   }, [dispatch]);\r\n\r\n  //   // Сетит title страницы при маунте компонента\r\n  //   useEffect(() => {\r\n  //     document.title = 'Contacts list | Phonebook';\r\n  //   }, []);\r\n\r\n  return (\r\n    <main>\r\n      <ContactForm />\r\n      {data && data.length >= 2 && <ContactsFilter />}\r\n      <ContactList />\r\n      {isFetching && <Loader />}\r\n\r\n      {/* {isError && <Alert severity=\"error\">{isError}</Alert>} */}\r\n    </main>\r\n  );\r\n}\r\n"],"sourceRoot":""}